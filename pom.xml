<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.inventage.airmock</groupId>
    <artifactId>parent</artifactId>
    <packaging>pom</packaging>
    <version>1.0.0-SNAPSHOT</version>

    <modules>
        <module>server</module>
        <module>docker</module>
        <module>docker-compose</module>
    </modules>

	<licenses>
		<license>
			<name>The BSD 2-Clause License</name>
			<url>https://opensource.org/licenses/BSD-2-Clause</url>
		</license>
	</licenses>

	<developers>
        <developer>
			<name>Geraldine Von Roten</name>
			<email>geraldine.vonroten@inventage.com</email>
			<organization>Inventage AG</organization>
			<organizationUrl>www.inventage.com</organizationUrl>
		</developer>
		<developer>
			<name>Edwin Steiner</name>
			<email>edwin.steiner@inventage.com</email>
			<organization>Inventage AG</organization>
			<organizationUrl>www.inventage.com</organizationUrl>
		</developer>
	</developers>

	<scm>
		<connection>scm:git:git@github.com:inventage/airmock.git</connection>
		<developerConnection>scm:git:git@github.com:inventage/airmock.git</developerConnection>
		<url>git@github.com:inventage/airmock.git</url>
	</scm>

    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>

        <project.name.prefix>Inventage Airmock</project.name.prefix>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <vertx.version>3.8.1</vertx.version>
        <junit5.version>5.4.2</junit5.version>

        <docker.pull.registry></docker.pull.registry>
        <docker.push.registry>docker.pkg.github.com/inventage/airmock/</docker.push.registry>

        <image.name>${project.groupId}.${project.artifactId}</image.name>
        <image.global.name>${docker.push.registry}${image.name}</image.global.name>

        <jre.base.image>vertx/vertx3-alpine:${vertx.version}</jre.base.image>
    </properties>

    <build>
        <plugins>
            <!-- Fail build when checkstyle warnings are present-->
            <plugin>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <executions>
                    <execution>
                        <id>checkstyle-check-validate</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <consoleOutput>true</consoleOutput>
                    <failOnViolation>true</failOnViolation>
                    <violationSeverity>warning</violationSeverity>
                </configuration>
            </plugin>
            <!-- Run unit tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M3</version>
            </plugin>
            <!-- Fail when maven dependency warnings are present-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>analyze</id>
                        <goals>
                            <goal>analyze-only</goal>
                        </goals>
                        <configuration>
                            <failOnWarning>true</failOnWarning>
                            <!-- ignore annotations for "unused but declared" warnings -->
                            <ignoredUnusedDeclaredDependencies>
                                <ignoredUnusedDeclaredDependency>org.slf4j:slf4j-api</ignoredUnusedDeclaredDependency>
                                <ignoredUnusedDeclaredDependency>ch.qos.logback:logback-classic</ignoredUnusedDeclaredDependency>
                                <ignoredUnusedDeclaredDependency>com.inventage.airmock:server</ignoredUnusedDeclaredDependency>
                            </ignoredUnusedDeclaredDependencies>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <executions>
                    <execution>
                        <id>enforce-versions</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <bannedPlugins>
                                    <!-- Will only display a warning but does not fail the build. -->
                                    <level>WARN</level>
                                    <excludes>
                                        <exclude>org.apache.maven.plugins:maven-verifier-plugin</exclude>
                                    </excludes>
                                    <message>Please consider using the maven-invoker-plugin
                                        (http://maven.apache.org/plugins/maven-invoker-plugin/)!
                                    </message>
                                </bannedPlugins>
                                <requireMavenVersion>
                                    <version>3.1.0</version>
                                </requireMavenVersion>
                                <requireJavaVersion>
                                    <version>1.8</version>
                                </requireJavaVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- Skip artifact upload during deploy phase by Maven -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>2.8.2</version>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <!--
                    Needed to set global directory variables for all modules.
                    We need this plugin for e.g. properly reference where the checkstyle configuration files lie.
                    @see https://github.com/jdcasey/directory-maven-plugin
                -->
                <groupId>org.commonjava.maven.plugins</groupId>
                <artifactId>directory-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>rootdir-initialize</id>
                        <goals>
                            <goal>highest-basedir</goal>
                        </goals>
                        <phase>initialize</phase>
                    </execution>
                    <execution>
                        <id>rootdir-pre-site</id>
                        <goals>
                            <goal>highest-basedir</goal>
                        </goals>
                        <phase>pre-site</phase>
                    </execution>
                    <execution>
                        <id>rootdir-validate</id>
                        <goals>
                            <goal>highest-basedir</goal>
                        </goals>
                        <phase>validate</phase>
                    </execution>
                    <execution>
                        <id>rootdir-verify</id>
                        <goals>
                            <goal>highest-basedir</goal>
                        </goals>
                        <phase>verify</phase>
                    </execution>
                </executions>
                <configuration>
                    <property>project.rootdir</property>
                </configuration>
            </plugin>
        </plugins>

        <pluginManagement>
            <plugins>
                <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-clean-plugin -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <version>3.0.0-M2</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <dependencies>
                        <!-- manually pull asm version 6.2 for compiler plugin to enable java 11 support -->
                        <dependency>
                            <groupId>org.ow2.asm</groupId>
                            <artifactId>asm</artifactId>
                            <version>6.2</version>
                        </dependency>
                    </dependencies>
                    <version>3.1.1</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>
                <!-- maven compiler options -->
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.8.0</version>
                    <configuration>
                        <source>${maven.compiler.source}</source>
                        <target>${maven.compiler.target}</target>
                        <failOnWarning>true</failOnWarning>
                    </configuration>
                </plugin>
                <!-- for assemble all dependent jar files -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>3.1.1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>
                <plugin>
                    <groupId>com.github.eirslett</groupId>
                    <artifactId>frontend-maven-plugin</artifactId>
                    <version>1.7.5</version>
                </plugin>
                <plugin>
                    <groupId>com.inventage.envcheck</groupId>
                    <artifactId>envcheck-maven-plugin</artifactId>
                    <version>1.0.9</version>
                </plugin>
                <plugin>
                    <!--
                        For checking versions and updates of plugins used.
                        @see https://www.mojohaus.org/versions-maven-plugin/index.html
                    -->
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>versions-maven-plugin</artifactId>
                    <version>2.7</version>
                </plugin>
                <plugin>
                    <groupId>org.commonjava.maven.plugins</groupId>
                    <artifactId>directory-maven-plugin</artifactId>
                    <version>0.3.1</version>
                </plugin>
                <plugin>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>3.7.1</version>
                </plugin>
                <plugin>
                    <artifactId>maven-project-info-reports-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>
                <plugin>
                    <artifactId>maven-jxr-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>
                <!-- for checking code quality -->
                <plugin>
                    <artifactId>maven-checkstyle-plugin</artifactId>
                    <version>3.1.0</version>
                    <dependencies>
                        <dependency>
                            <groupId>com.puppycrawl.tools</groupId>
                            <artifactId>checkstyle</artifactId>
                            <version>8.29
                            </version> <!-- Keep same version as used by the IntelliJ plugin, see IntelliJ IDEA > Preferences > Checkstyle -->
                        </dependency>
                    </dependencies>
                    <configuration>
                        <configLocation>.checkstyle/config.xml</configLocation>
                        <consoleOutput>true</consoleOutput>
                        <failOnViolation>true</failOnViolation>
                    </configuration>
                </plugin>
                <!-- for building Docker Images -->
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>dockerfile-maven-plugin</artifactId>
                    <version>1.4.10</version>
                    <configuration>
                        <contextDirectory>${project.build.directory}/classes</contextDirectory>
                        <repository>${image.name}</repository>
                        <pullNewerImage>false</pullNewerImage>
                        <skipDockerInfo>true</skipDockerInfo>
                    </configuration>
                    <executions>
                        <!-- build image -->
                        <execution>
                            <id>build-image</id>
                            <phase>install</phase>
                            <goals>
                                <goal>build</goal>
                            </goals>
                        </execution>
                        <!-- tag image with version -->
                        <execution>
                            <id>tag-image-versioned</id>
                            <phase>install</phase>
                            <goals>
                                <goal>tag</goal>
                            </goals>
                            <configuration>
                                <repository>${image.global.name}</repository>
                                <tag>${project.version}</tag>
                            </configuration>
                        </execution>
                        <!-- tag image with latest-->
                        <execution>
                            <id>tag-image-latest</id>
                            <phase>install</phase>
                            <goals>
                                <goal>tag</goal>
                            </goals>
                            <configuration>
                                <repository>${image.global.name}</repository>
                                <tag>latest</tag>
                            </configuration>
                        </execution>
                        <!-- push image latest -->
                        <execution>
                            <id>push-image-latest</id>
                            <phase>deploy</phase>
                            <goals>
                                <goal>push</goal>
                            </goals>
                            <configuration>
                                <username>${env.GITHUB_ACTOR}</username>
                                <password>${env.GITHUB_TOKEN}</password>
                                <repository>${image.global.name}</repository>
                                <tag>latest</tag>
                            </configuration>
                        </execution>
                        <!-- push image versioned -->
                        <execution>
                            <id>push-image-versioned</id>
                            <phase>deploy</phase>
                            <goals>
                                <goal>push</goal>
                            </goals>
                            <configuration>
                                <username>${env.GITHUB_ACTOR}</username>
                                <password>${env.GITHUB_TOKEN}</password>
                                <repository>${image.global.name}</repository>
                                <tag>${project.version}</tag>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <reporting> <!-- usage: mvn site  -->
        <plugins>
            <!--
                JXR produces a cross-reference of the project's sources (needed for maven-checkstyle-plugin)
                @see http://maven.apache.org/jxr/maven-jxr-plugin/
                @see https://github.com/apache/maven-jxr
            -->
            <plugin>
                <artifactId>maven-jxr-plugin</artifactId>
            </plugin>
            <plugin>
                <artifactId>maven-checkstyle-plugin</artifactId>
            </plugin>
        </plugins>
    </reporting>

    <dependencyManagement>
        <dependencies>
            <!-- vertx stack -->
            <dependency>
                <groupId>io.vertx</groupId>
                <artifactId>vertx-stack-depchain</artifactId>
                <version>${vertx.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- for logging -->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>1.7.18</version>
            </dependency>
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>1.2.3</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/io.reactivex.rxjava2/rxjava -->
            <dependency>
                <groupId>io.reactivex.rxjava2</groupId>
                <artifactId>rxjava</artifactId>
                <version>2.2.12</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-text</artifactId>
                <version>1.8</version>
            </dependency>

            <dependency>
                <groupId>com.inventage.airmock</groupId>
                <artifactId>waf</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.inventage.airmock</groupId>
                <artifactId>server</artifactId>
                <version>${project.version}</version>
            </dependency>

            <!-- for JWT decode -->
            <dependency>
                <groupId>com.auth0</groupId>
                <artifactId>java-jwt</artifactId>
                <version>3.2.0</version>
            </dependency>
            <dependency>
                <groupId>com.auth0</groupId>
                <artifactId>jwks-rsa</artifactId>
                <version>0.9.0</version>
            </dependency>

            <!-- https://mvnrepository.com/artifact/io.netty/netty-codec-http -->
            <dependency>
                <groupId>io.netty</groupId>
                <artifactId>netty-codec-http</artifactId>
                <version>4.1.59.Final</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/io.netty/netty-codec -->
            <dependency>
                <groupId>io.netty</groupId>
                <artifactId>netty-codec</artifactId>
                <version>4.1.39.Final</version>
            </dependency>

            <!-- saml -->
            <dependency>
                <groupId>org.opensaml</groupId>
                <artifactId>opensaml</artifactId>
                <version>2.6.4</version>
            </dependency>
            <dependency>
                <groupId>org.opensaml</groupId>
                <artifactId>xmltooling</artifactId>
                <version>1.4.4</version>
            </dependency>

            <!-- junit -->
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-api</artifactId>
                <version>${junit5.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-engine</artifactId>
                <version>${junit5.version}</version>
                <scope>test</scope>
            </dependency>

        </dependencies>
    </dependencyManagement>
</project>
